/// Returns a {type: bool} on whether or not the given object implements the given operation.
///
/// # Parameters
/// - obj: The object to check.
/// - name ({type: string}): The name of the operation to check for.
///
/// # Returns
/// {type: bool}
///
/// # Example
/// ```trb
/// require std;
///
/// std.has_op(1, "add")  // true
/// std.has_op(1, "next") // false
/// ```
func has_op(obj: any, name: string) -> bool {
    __trb_internal_has_op(obj, name)
}

/// Gets the desired operation function of the given object.
///
/// # Parameters
/// - obj: The object.
/// - name ({type: string}): The name of the operation to get.
///
/// # Returns
/// {type: function}: The function that when called (with desired arguments), runs the operation on the object.
///
/// # Example
/// ```trb
/// require std;
///
/// let add_op = std.get_op(1, "add");
/// std.assert_eq(1 + 1, add_op(1));  // Passes assertion
/// ```
func get_op(obj: any, name: string) -> (...) -> any {
    func _wrapped(*args, **kwargs) {
        __trb_internal_call_op(obj, name, *args, **kwargs)
    }
}

/// Directly calls the desired operation function of the given object.
///
/// # Parameters
/// - obj: The object.
/// - name ({type: string}): The name of the operation to call.
///
/// # Returns
/// The return value of the called operation.
///
/// # Example
/// ```trb
/// require std;
///
/// std.assert_eq(std.call_op(1, "add", 1), 1 + 1);  // Passes
/// ```
func call_op(obj: any, name: string, *args, **kwargs) -> any {
    __trb_internal_call_op(obj, name, *args, **kwargs)
}