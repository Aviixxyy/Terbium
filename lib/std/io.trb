require repr as _repr from .util;

/// Writes a string into standard-output.
/// To print with a trailing newline, see {func: println}.
///
/// The given message will be casted into a {type: string} beforehand.
///
/// # Parameters
/// - message (Castable<{type: string}>): The message to print, should be castable to {type: string}.
/// - *extra (optional Castable<{type: string}>): Other messages to print alongside with the main message.
/// Will be delimited alongside with the main message with `sep`.
/// - repr ({type: bool}): Whether or not to print the debug representation instead of casting it to string.
/// Defaults to `false`.
/// - sep ({type: string}, default `" "`): The separator given you pass extra items to `*extra`.
/// Defaults to a standard space (`" "`).
///
/// # Example
/// ```trb
/// require std;
///
/// func main() {
///     std.print("Hello, ");
///     std.print("world!");
/// }
/// ```
func print(message: Castable<string>, *extra: Castable<string>, repr: bool = false, sep: string = " ") -> null {
    __trb_internal_print(
        [print]
            .iter()
            .chain(extra.iter())
            .map(if repr { _repr } else { item => item::string })
            .join(sep)
    );
}

/// Writes a string into standard-output with a newline at the end.
/// To print without a trailing newline, see {func: print}.
///
/// The given message will be casted into a {type: string} beforehand.
///
/// # Parameters
/// - message (Castable<{type: string}>): The message to print, should be castable to {type: string}.
/// - *extra (optional Castable<{type: string}>): Other messages to print alongside with the main message.
/// Will be delimited alongside with the main message with `sep`.
/// - repr ({type: bool}): Whether or not to print the debug representation instead of casting it to string.
/// Defaults to `false`.
/// - sep ({type: string}, default `" "`): The separator given you pass extra items to `*extra`.
/// Defaults to a standard space (`" "`).
///
/// # Example
/// ```trb
/// require std;
///
/// func main() {
///     std.println("Hello, world!");
/// }
/// ```
func println(message: Castable<string>, *extra: Castable<string>, repr: bool = false, sep: string = " ") -> null {
    print(message, *extra, repr=repr, sep=sep);
    print("\n");
}